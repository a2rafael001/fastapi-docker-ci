name: CI-CD  # –ù–∞–∑–≤–∞–Ω–∏–µ workflow, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ GitHub Actions UI

on:
  push:
    branches: [main]  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—É—à–µ –≤ –≤–µ—Ç–∫—É main

jobs:
  # üß± –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ —Å —Ç–µ–≥–æ–º –ø–æ SHA
  build:
    runs-on: self-hosted  # –ó–∞–ø—É—Å–∫ –Ω–∞ —Å–≤–æ—ë–º runner

    outputs:  # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö job
      image-tag: ${{ steps.set-tag.outputs.tag }}

    steps:
      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v3

      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–≥–∞ –ø–æ SHA –∫–æ–º–º–∏—Ç–∞
        id: set-tag
        run: echo "tag=myapp:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: –°–±–æ—Ä–∫–∞ builder-–æ–±—Ä–∞–∑–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
        run: docker build --target builder -t ${{ steps.set-tag.outputs.tag }} .

  # ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  test:
    runs-on: self-hosted
    needs: build  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ build

    # –í—Ä–µ–º–µ–Ω–Ω—ã–π PostgreSQL –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: kubsu
          POSTGRES_USER: kubsu
          POSTGRES_PASSWORD: kubsu
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U kubsu"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:  # –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: kubsu
      DB_USER: kubsu
      DB_PASS: kubsu

    steps:
      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
        uses: actions/checkout@v3

      - name: –û–∂–∏–¥–∞–Ω–∏–µ PostgreSQL
        run: |
          until pg_isready -h ${{ env.DB_HOST }} -p ${{ env.DB_PORT }} -U ${{ env.DB_USER }}; do
            echo "‚è≥ Waiting for Postgres..."
            sleep 2
          done

      - name: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        run: |
          docker run --rm \
            --network host \
            -e PYTHONPATH=/app \
            -e DB_HOST=${{ env.DB_HOST }} \
            -e DB_PORT=${{ env.DB_PORT }} \
            -e DB_NAME=${{ env.DB_NAME }} \
            -e DB_USER=${{ env.DB_USER }} \
            -e DB_PASS=${{ env.DB_PASS }} \
            ${{ needs.build.outputs.image-tag }} \
            pytest tests

  # üöÄ –î–µ–ø–ª–æ–π
  deploy:
    runs-on: self-hosted
    needs: [build, test]  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω—ã—Ö build –∏ test

    env:
      IMAGE_NAME: myapp

    steps:
      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
        uses: actions/checkout@v3

      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH-–∞–≥–µ–Ω—Ç–∞
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞
        run: docker build -t ${{ env.IMAGE_NAME }}:final .

      - name: –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ SSH
        run: |
          echo "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä..."

          # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—É—é –º–∞—à–∏–Ω—É
          docker save ${{ env.IMAGE_NAME }}:final | ssh -o StrictHostKeyChecking=no \
            -p ${{ secrets.PORT }} \
            ${{ secrets.USER }}@${{ secrets.HOST }} \
            "podman load && podman tag ${{ env.IMAGE_NAME }}:final ${{ env.IMAGE_NAME }}:final"

          # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          ssh -o StrictHostKeyChecking=no \
            -p ${{ secrets.PORT }} \
            ${{ secrets.USER }}@${{ secrets.HOST }} \
            "podman stop ${{ env.IMAGE_NAME }} || true && \
             podman rm ${{ env.IMAGE_NAME }} || true && \
             podman run -d --name ${{ env.IMAGE_NAME }} \
             --network=host \
             ${{ env.IMAGE_NAME }}:final"
